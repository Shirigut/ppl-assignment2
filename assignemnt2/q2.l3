(define append
  (lambda (lst1 lst2)
    (if (eq? lst1 '())
        lst2
        (cons (car lst1) (append (cdr lst1) lst2)))
        )
      )


(define reverse 
  (lambda (lst)
    (if (eq? lst '())
        lst
        (append (reverse (cdr lst)) (list (car lst))))
  )
)

(define helper
  (lambda(lst counter)
    (if (eq? counter 0)
        '()
        (append lst (helper lst (- counter 1))))
  )
)


(define duplicate-items
   (lambda(lst dup-count)
      (if (eq? lst '())
          lst
      (append (helper (list (car lst)) (car dup-count)) (duplicate-items (cdr lst) (append (cdr dup-count) (list (car dup-count))))))
  )
)

(define remove-duplicates
  (lambda (num lst)
    (if (eq? lst '())
      '()
    (if (= (car lst) num)
      (remove-duplicates num (cdr lst))
      (cons (car lst) (remove-duplicates num (cdr lst)))))
  )
)

(define payment
  (lambda (n coins-lst)
    (if (eq? n 0)
        1
        (if (or (eq? coins-lst '())  (< n 0))
            0
            (+ (payment (- n (car coins-lst)) (cdr coins-lst)) (payment n (remove-duplicates (car coins-lst) coins-lst)))))
  )
)


(define compose-n
  (lambda( f n)
        (if (= n 1)
            f
            (lambda (x) 
            (f ((compose-n f (- n 1)) x))))
  )
)

